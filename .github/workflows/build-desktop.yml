name: Build Firefly Desktop

on:
    workflow_dispatch:
        inputs:
            debugElectronBuilder:
                description: 'Verbose electron-builder output'
                required: true
                default: 'false'
            stage:
                description: 'Stage (alpha, beta, or prod)'
                required: true
                default: 'prod'

jobs:
    setup:
        runs-on: ubuntu-latest
        if: startsWith(github.ref, 'refs/tags/desktop')
        outputs:
            version: ${{ steps.set_outputs.outputs.version }}
            release_name: ${{ steps.set_outputs.outputs.release_name }}
            stage: ${{ steps.set_outputs.outputs.stage }}

        steps:
            - id: set_outputs
              name: Set outputs for version, release name, and stage
              run: |
                  VERSION=${GITHUB_REF#refs/*/desktop-}
                  RELEASE_NAME=$(echo $VERSION | perl -0777 -pe 's/^([0-9]\d*\.[0-9]\d*\.[0-9]\d*)(?:-([a-z]*)-(\d*))?$/$1 \u$2 $3/')
                  STAGE=$(echo $VERSION | perl -0777 -pe 's/^([0-9]\d*\.[0-9]\d*\.[0-9]\d*)(?:-([a-z]*)-([0-9]\d*(\.[0-9]\d*)*))?$/$2/')

                  if [ -z "$STAGE" ]; then
                    STAGE="prod"
                  fi

                  echo "::set-output name=version::$VERSION"
                  echo "::set-output name=release_name::$RELEASE_NAME"
                  echo "::set-output name=stage::$STAGE"

    build:
        runs-on: ${{ matrix.os }}
        if: ${{ always() }}
        needs: [setup]
        strategy:
            matrix:
                os: [windows-2019]
            fail-fast: false
        env:
            VERSION: ${{ needs.setup.outputs.version }}
            STAGE: ${{ needs.setup.outputs.stage || github.event.inputs.stage }}

        steps:
            - uses: actions/checkout@v2

            - name: Set up Node.js
              uses: actions/setup-node@v1
              with:
                  node-version: 16.4.2

            - name: Set up Python 2.x
              uses: actions/setup-python@v2
              with:
                  python-version: '2.x'

            - name: Install Rust toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  profile: minimal

            - name: Install LLVM and Clang (Windows) # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
              uses: KyleMayes/install-llvm-action@32c4866ebb71e0949e8833eb49beeebed48532bd
              if: matrix.os == 'windows-2019'
              with:
                  version: '11.0'
                  directory: ${{ runner.temp }}/llvm

            - name: Set LIBCLANG_PATH (Windows)
              run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
              if: matrix.os == 'windows-2019'

            - name: Enable verbose output for electron-builder (Windows)
              run: echo "DEBUG=electron-builder" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
              if: matrix.os == 'windows-2019' && github.event.inputs.debugElectronBuilder && github.event.inputs.debugElectronBuilder == 'true'

            - name: Install dependencies
              # Increase network timeout threshold to reduce build failures on Windows
              run: yarn --network-timeout 1000000

            - name: Install Sentry CLI
              # Yarn has issues putting binaries in the PATH on Windows
              run: npm i -g @sentry/cli
              if: ${{ startsWith(github.ref, 'refs/tags/desktop') && matrix.os == 'windows-2019' }}

            - name: Set productName
              run: node scripts/fix-productName.js
              working-directory: packages/desktop

            - name: Bundle desktop JS
              run: yarn build:${STAGE}
              working-directory: packages/desktop
              shell: bash
              env:
                  HARDCODE_NODE_ENV: true

            - name: Build Electron app (Windows)
              run: yarn compile:${env:STAGE}:win
              working-directory: packages/desktop
              if: matrix.os == 'windows-2019'

            - name: Compute checksums (Windows)
              run: Get-ChildItem "." -Filter firefly-desktop* | Foreach-Object { $(Get-FileHash -Path $_.FullName -Algorithm SHA256).Hash | Set-Content ($_.FullName + '.sha256') }
              working-directory: packages/desktop/out
              if: matrix.os == 'windows-2019'

            - name: Upload artifacts
              uses: actions/upload-artifact@v2
              with:
                  name: firefly-desktop-${{ matrix.os }}
                  path: |
                      packages/desktop/out/firefly-desktop*
                      packages/desktop/out/latest*
